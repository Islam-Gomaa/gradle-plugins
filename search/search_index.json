{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gradle Plugins \u00b6 Usage and docs \u00b6 Check the usage of each Gradle Plugin by visiting the Gradle Plugins website and expand the Projects dropdown menu in the navigation bar.","title":"Overview"},{"location":"#gradle-plugins","text":"","title":"Gradle Plugins"},{"location":"#usage-and-docs","text":"Check the usage of each Gradle Plugin by visiting the Gradle Plugins website and expand the Projects dropdown menu in the navigation bar.","title":"Usage and docs"},{"location":"CHANGELOG/","text":"Changelog \u00b6 [0.1.0-alpha.59] - 2021-09-27 \u00b6 No changes [0.1.0-alpha.58] - 2021-09-27 \u00b6 No changes [0.1.0-alpha.57] - 2021-09-27 \u00b6 No changes [0.1.0-alpha.56] - 2021-09-25 \u00b6 Added \u00b6 all plugins to Gradle Plugin Portal [0.1.0-alpha.55] - 2021-09-25 \u00b6 Fixed \u00b6 plugin publications were using incorrect website and vcsUrl [0.1.0-alpha.54] - 2021-09-12 \u00b6 Added \u00b6 kotlin-multiplatform-no-android without applying Android plugin Removed \u00b6 all-plugins [0.1.0-alpha.53] - 2021-09-12 \u00b6 Added \u00b6 kotlin-multiplatform applies AGP and has a default Android config [0.1.0-alpha.52] - 2021-09-11 \u00b6 Fixed \u00b6 code-formatting search for kt files in build folders [0.1.0-alpha.51] - 2021-09-11 \u00b6 Fixed \u00b6 code-formatter searching Kotlin files only on src [0.1.0-alpha.50] - 2021-09-11 \u00b6 Added \u00b6 kotlin-jvm kotlin-multiplatform accessors for all targets Changed \u00b6 android-library improvements: src folder is no longer necessary new project structure: main/AndroidManifest.xml main/assets main/java main/kotlin main/res main/resources kotlin-multiplatform improvements: src fodler is no longer necessary new project structure: targetMain/kotlin targetMain/resources Removed \u00b6 isSnapshot and use reckon.stage to check if it is a snapshot [0.1.0-alpha.49] - 2021-08-21 \u00b6 No changes [0.1.0-alpha.48] - 2021-08-21 \u00b6 Fixed \u00b6 build-version-catalogs build files path [0.1.0-alpha.47] - 2021-08-20 \u00b6 Removed \u00b6 unnecessary error CLI messages when using publish-* plugins [0.1.0-alpha.46] - 2021-08-14 \u00b6 Changed \u00b6 publish-* plugins can use Gradle properties, environment variables or both mixed. publish-* plugins will use useInMemoryPgpKeys as default method which fallbacks to useGpgCmd GPG_KEY_NAME renamed to SIGNING_KEY_NAME GPG_KEY_PASSPHRASE renamed to SIGNING_KEY_PASSPHRASE GPG_PRIVATE_KEY renamed to SIGNING_KEY [0.1.0-alpha.45] - 2021-08-14 \u00b6 Fixed \u00b6 build-version-catalogs wrong path in Unix based systems [0.1.0-alpha.44] - 2021-08-13 \u00b6 Fixed \u00b6 build-version-catalogs wrong path in Unix based systems [0.1.0-alpha.43] - 2021-08-13 \u00b6 Fixed \u00b6 build-version-catalogs generates the version in wrong path [0.1.0-alpha.42] - 2021-08-13 \u00b6 Added \u00b6 build-version-catalogs supports empty version build-version-catalogs supports not setting bundles Changed \u00b6 build-version-catalogs generates the catalogs in build/catalogs instead of gradle/catalogs [0.1.0-alpha.41] - 2021-08-13 \u00b6 No changes [0.1.0-alpha.40] - 2021-06-30 \u00b6 Fixed \u00b6 plugin-accessors can\u2019t be used if a javiersc plugin is present [0.1.0-alpha.39] - 2021-06-28 \u00b6 Added \u00b6 massive-catalogs-updater saves version in the root project build/versions/massive-catalogs.txt [0.1.0-alpha.38] - 2021-06-28 \u00b6 Changed \u00b6 updateGradlew to updateGradleWrapper massive-catalogs-updater fetches directly from the maven repo Fixed \u00b6 gradle-wrapper-updater-task [0.1.0-alpha.37] - 2021-06-27 \u00b6 No changes [0.1.0-alpha.36] - 2021-06-27 \u00b6 Fixed \u00b6 publishing for plugin-accessors registering tasks without doLast [0.1.0-alpha.35] - 2021-06-27 \u00b6 Added \u00b6 plugin-accessors massive-catalogs-updater plugin [0.1.0-alpha.34] - 2021-06-24 \u00b6 Added \u00b6 update-gradle-wrapper plugin [0.1.0-alpha.33] - 2021-06-23 \u00b6 Added \u00b6 group to all registered Gradle tasks Fixed \u00b6 Crash when Changelog.md has no initial version [0.1.0-alpha.32] - 2021-06-22 \u00b6 Added \u00b6 android-library kotlin-multiplatform plugin flatten folders structure Changed \u00b6 pomName to pom.name pomDescription to pom.description pomUrl to pom.url pomLicenseName to pom.license.name pomLicenseUrl to pom.license.url pomDeveloperId to pom.developer.id pomDeveloperName to pom.developer.name pomDeveloperEmail to pom.developer.email pom.smc.url to pom.smc.url pom.smc.connection to pom.smc.connection pomSmcDeveloperConnection to pom.smc.developerConnection Fixed \u00b6 readme-badges-generator not printing the library docs not printing there are no markdown files [0.1.0-alpha.31] - 2021-05-07 \u00b6 Added \u00b6 code-formatter uses ktfmt version from Massive Catalogs [0.1.0-alpha.30] - 2021-05-06 \u00b6 Changed \u00b6 all-projects applies LifecycleBasePlugin to generate the clean task Removed \u00b6 all-projects clean task [0.1.0-alpha.29] - 2021-05-06 \u00b6 Fixed \u00b6 all-project clean task [0.1.0-alpha.28] - 2021-05-05 \u00b6 Added \u00b6 Add to Test type tasks a few improvements by default Fixed \u00b6 docs looking for an incorrect path in all **.md projects files Fix clean task being registered even with it already exists [0.1.0-alpha.27] - 2021-05-05 \u00b6 Fixed \u00b6 docs plugin replace wrong asset path in README.md file docs looking for an incorrect index.md file path [0.1.0-alpha.26] - 2021-05-05 \u00b6 Changed \u00b6 mkdocs template, favicon and logo properties, in docs [0.1.0-alpha.25] - 2021-05-05 \u00b6 Added \u00b6 all-projects Default config like set up group for all projects Delete root build directory when clean task is called Changed \u00b6 Rename libGroup to allProjects.group Rename libName to allProjects.name [0.1.0-alpha.24] - 2021-05-04 \u00b6 Changed \u00b6 readme-badges-generator renamed to readme-badges mainSubProject property renamed to readmeBadges.mainProject shouldGenerateVersionBadgePerProject renamed to readmeBadges.allProjects Fixed \u00b6 docs forces using markdown files in all modules even if they shouldn\u2019t have docs [0.1.0-alpha.23] - 2021-05-03 \u00b6 Fixed \u00b6 Fix applying incorrect id in code-formatter [0.1.0-alpha.22] - 2021-05-03 \u00b6 No changes [0.1.0-alpha.21] - 2021-05-02 \u00b6 Added \u00b6 docs plugin autogenerate .docs and children dirs if they don\u2019t exist docs can generate a complete website via mkdocs docs autogenerate nav bar by adding Changelog, API docs and Projects Autogenerate detekt IDEA plugin config in .idea directory Autogenerate ktfmt IDEA plugin config in .idea directory Changed \u00b6 code-formatter is applied to all Kotlin projects by adding it in root build.gradle.kts readme-badges-generator rename generateReadmeBadges task to buildReadmeBadges Changelog registers mergeChangelog task instead of merging automatically with patchChangelog Dokka is automatically applied to all projects that are applying Kotlin Gradle plugin Removed \u00b6 jcenter() Fixed \u00b6 module docs generated hasn\u2019t MODULE.md info All publish-* plugins have using Dokka incorrectly [0.1.0-alpha.20] - 2021-04-27 \u00b6 Added \u00b6 changelog can merge non-final versions into one final version readme-badges-generator prints Kotlin version [0.1.0-alpha.19] - 2021-04-27 \u00b6 No changes [0.1.0-alpha.18] - 2021-04-26 \u00b6 Added \u00b6 Add all-plugins module which exposes all plugins Removed \u00b6 ktfmt uses the default Spotless ktfmt version instead of indicating the last one Detekt version is not needed Fixed \u00b6 Kotlin version is found by checking all the projects instead of from Version Catalog [0.1.0-alpha.17] - 2021-04-26 \u00b6 Updated \u00b6 Gradle Wrapper to 7.0 [0.1.0-alpha.16] - 2021-04-24 \u00b6 Fixed \u00b6 publish-android-library doesn\u2019t sign the release publication [0.1.0-alpha.15] - 2021-04-22 \u00b6 Fixed \u00b6 publish-android-library doesn\u2019t found any component detekt warnings [0.1.0-alpha.14] - 2021-03-22 \u00b6 Fixed \u00b6 changelog was throwing an exception [0.1.0-alpha.13] - 2021-03-21 \u00b6 Fixed \u00b6 changelog was throwing an exception when it was being used by first time [0.1.0-alpha.12] - 2021-03-21 \u00b6 Fixed \u00b6 changelog output format was incorrect [0.1.0-alpha.11] - 2021-03-21 \u00b6 Fixed \u00b6 publish-version-catalog wasn\u2019t applying version-catalog plugin [0.1.0-alpha.10] - 2021-03-21 \u00b6 Changed \u00b6 readme-badges-generator registers generateReadmeBadges instead of generate badges when syncing Fixed \u00b6 changelog output format was incorrect [0.1.0-alpha.9] - 2021-03-21 \u00b6 Fixed \u00b6 publish-* plugins were not working [0.1.0-alpha.8] - 2021-03-21 \u00b6 Changed \u00b6 Separate publish plugin into: publish-android-library publish-kotlin-jvm publish-kotlin-multiplatform publish-version-catalog Show git diff when checkIsSignificant is invoked in all publish plugins [0.1.0-alpha.7] - 2021-03-20 \u00b6 No changes [0.1.0-alpha.6] - 2021-03-20 \u00b6 Added \u00b6 plugins publish-gradle-plugin [0.1.0-alpha.5] - 2021-03-20 \u00b6 Added \u00b6 support to com.android.library and version-catalog plugins in publish Changed \u00b6 Move checkIsSignificant Gradle task from versioning to publish Fixed \u00b6 changelog plugin was adding to the end of the file two new lines [0.1.0-alpha.4] - 2021-03-20 \u00b6 No changes [0.1.0-alpha.3] - 2021-03-19 \u00b6 Added \u00b6 expose getDefaultLanguageSettings [0.1.0-alpha.2] - 2021-03-18 \u00b6 No changes [0.1.0-alpha.1] - 2021-03-18 \u00b6 Added \u00b6 plugins changelog code-analysis code-formatter dependency-updates docs kotlin-multiplatform nexus publish readme-badges-generator versioning","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#010-alpha59-2021-09-27","text":"No changes","title":"[0.1.0-alpha.59] - 2021-09-27"},{"location":"CHANGELOG/#010-alpha58-2021-09-27","text":"No changes","title":"[0.1.0-alpha.58] - 2021-09-27"},{"location":"CHANGELOG/#010-alpha57-2021-09-27","text":"No changes","title":"[0.1.0-alpha.57] - 2021-09-27"},{"location":"CHANGELOG/#010-alpha56-2021-09-25","text":"","title":"[0.1.0-alpha.56] - 2021-09-25"},{"location":"CHANGELOG/#added","text":"all plugins to Gradle Plugin Portal","title":"Added"},{"location":"CHANGELOG/#010-alpha55-2021-09-25","text":"","title":"[0.1.0-alpha.55] - 2021-09-25"},{"location":"CHANGELOG/#fixed","text":"plugin publications were using incorrect website and vcsUrl","title":"Fixed"},{"location":"CHANGELOG/#010-alpha54-2021-09-12","text":"","title":"[0.1.0-alpha.54] - 2021-09-12"},{"location":"CHANGELOG/#added_1","text":"kotlin-multiplatform-no-android without applying Android plugin","title":"Added"},{"location":"CHANGELOG/#removed","text":"all-plugins","title":"Removed"},{"location":"CHANGELOG/#010-alpha53-2021-09-12","text":"","title":"[0.1.0-alpha.53] - 2021-09-12"},{"location":"CHANGELOG/#added_2","text":"kotlin-multiplatform applies AGP and has a default Android config","title":"Added"},{"location":"CHANGELOG/#010-alpha52-2021-09-11","text":"","title":"[0.1.0-alpha.52] - 2021-09-11"},{"location":"CHANGELOG/#fixed_1","text":"code-formatting search for kt files in build folders","title":"Fixed"},{"location":"CHANGELOG/#010-alpha51-2021-09-11","text":"","title":"[0.1.0-alpha.51] - 2021-09-11"},{"location":"CHANGELOG/#fixed_2","text":"code-formatter searching Kotlin files only on src","title":"Fixed"},{"location":"CHANGELOG/#010-alpha50-2021-09-11","text":"","title":"[0.1.0-alpha.50] - 2021-09-11"},{"location":"CHANGELOG/#added_3","text":"kotlin-jvm kotlin-multiplatform accessors for all targets","title":"Added"},{"location":"CHANGELOG/#changed","text":"android-library improvements: src folder is no longer necessary new project structure: main/AndroidManifest.xml main/assets main/java main/kotlin main/res main/resources kotlin-multiplatform improvements: src fodler is no longer necessary new project structure: targetMain/kotlin targetMain/resources","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"isSnapshot and use reckon.stage to check if it is a snapshot","title":"Removed"},{"location":"CHANGELOG/#010-alpha49-2021-08-21","text":"No changes","title":"[0.1.0-alpha.49] - 2021-08-21"},{"location":"CHANGELOG/#010-alpha48-2021-08-21","text":"","title":"[0.1.0-alpha.48] - 2021-08-21"},{"location":"CHANGELOG/#fixed_3","text":"build-version-catalogs build files path","title":"Fixed"},{"location":"CHANGELOG/#010-alpha47-2021-08-20","text":"","title":"[0.1.0-alpha.47] - 2021-08-20"},{"location":"CHANGELOG/#removed_2","text":"unnecessary error CLI messages when using publish-* plugins","title":"Removed"},{"location":"CHANGELOG/#010-alpha46-2021-08-14","text":"","title":"[0.1.0-alpha.46] - 2021-08-14"},{"location":"CHANGELOG/#changed_1","text":"publish-* plugins can use Gradle properties, environment variables or both mixed. publish-* plugins will use useInMemoryPgpKeys as default method which fallbacks to useGpgCmd GPG_KEY_NAME renamed to SIGNING_KEY_NAME GPG_KEY_PASSPHRASE renamed to SIGNING_KEY_PASSPHRASE GPG_PRIVATE_KEY renamed to SIGNING_KEY","title":"Changed"},{"location":"CHANGELOG/#010-alpha45-2021-08-14","text":"","title":"[0.1.0-alpha.45] - 2021-08-14"},{"location":"CHANGELOG/#fixed_4","text":"build-version-catalogs wrong path in Unix based systems","title":"Fixed"},{"location":"CHANGELOG/#010-alpha44-2021-08-13","text":"","title":"[0.1.0-alpha.44] - 2021-08-13"},{"location":"CHANGELOG/#fixed_5","text":"build-version-catalogs wrong path in Unix based systems","title":"Fixed"},{"location":"CHANGELOG/#010-alpha43-2021-08-13","text":"","title":"[0.1.0-alpha.43] - 2021-08-13"},{"location":"CHANGELOG/#fixed_6","text":"build-version-catalogs generates the version in wrong path","title":"Fixed"},{"location":"CHANGELOG/#010-alpha42-2021-08-13","text":"","title":"[0.1.0-alpha.42] - 2021-08-13"},{"location":"CHANGELOG/#added_4","text":"build-version-catalogs supports empty version build-version-catalogs supports not setting bundles","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"build-version-catalogs generates the catalogs in build/catalogs instead of gradle/catalogs","title":"Changed"},{"location":"CHANGELOG/#010-alpha41-2021-08-13","text":"No changes","title":"[0.1.0-alpha.41] - 2021-08-13"},{"location":"CHANGELOG/#010-alpha40-2021-06-30","text":"","title":"[0.1.0-alpha.40] - 2021-06-30"},{"location":"CHANGELOG/#fixed_7","text":"plugin-accessors can\u2019t be used if a javiersc plugin is present","title":"Fixed"},{"location":"CHANGELOG/#010-alpha39-2021-06-28","text":"","title":"[0.1.0-alpha.39] - 2021-06-28"},{"location":"CHANGELOG/#added_5","text":"massive-catalogs-updater saves version in the root project build/versions/massive-catalogs.txt","title":"Added"},{"location":"CHANGELOG/#010-alpha38-2021-06-28","text":"","title":"[0.1.0-alpha.38] - 2021-06-28"},{"location":"CHANGELOG/#changed_3","text":"updateGradlew to updateGradleWrapper massive-catalogs-updater fetches directly from the maven repo","title":"Changed"},{"location":"CHANGELOG/#fixed_8","text":"gradle-wrapper-updater-task","title":"Fixed"},{"location":"CHANGELOG/#010-alpha37-2021-06-27","text":"No changes","title":"[0.1.0-alpha.37] - 2021-06-27"},{"location":"CHANGELOG/#010-alpha36-2021-06-27","text":"","title":"[0.1.0-alpha.36] - 2021-06-27"},{"location":"CHANGELOG/#fixed_9","text":"publishing for plugin-accessors registering tasks without doLast","title":"Fixed"},{"location":"CHANGELOG/#010-alpha35-2021-06-27","text":"","title":"[0.1.0-alpha.35] - 2021-06-27"},{"location":"CHANGELOG/#added_6","text":"plugin-accessors massive-catalogs-updater plugin","title":"Added"},{"location":"CHANGELOG/#010-alpha34-2021-06-24","text":"","title":"[0.1.0-alpha.34] - 2021-06-24"},{"location":"CHANGELOG/#added_7","text":"update-gradle-wrapper plugin","title":"Added"},{"location":"CHANGELOG/#010-alpha33-2021-06-23","text":"","title":"[0.1.0-alpha.33] - 2021-06-23"},{"location":"CHANGELOG/#added_8","text":"group to all registered Gradle tasks","title":"Added"},{"location":"CHANGELOG/#fixed_10","text":"Crash when Changelog.md has no initial version","title":"Fixed"},{"location":"CHANGELOG/#010-alpha32-2021-06-22","text":"","title":"[0.1.0-alpha.32] - 2021-06-22"},{"location":"CHANGELOG/#added_9","text":"android-library kotlin-multiplatform plugin flatten folders structure","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"pomName to pom.name pomDescription to pom.description pomUrl to pom.url pomLicenseName to pom.license.name pomLicenseUrl to pom.license.url pomDeveloperId to pom.developer.id pomDeveloperName to pom.developer.name pomDeveloperEmail to pom.developer.email pom.smc.url to pom.smc.url pom.smc.connection to pom.smc.connection pomSmcDeveloperConnection to pom.smc.developerConnection","title":"Changed"},{"location":"CHANGELOG/#fixed_11","text":"readme-badges-generator not printing the library docs not printing there are no markdown files","title":"Fixed"},{"location":"CHANGELOG/#010-alpha31-2021-05-07","text":"","title":"[0.1.0-alpha.31] - 2021-05-07"},{"location":"CHANGELOG/#added_10","text":"code-formatter uses ktfmt version from Massive Catalogs","title":"Added"},{"location":"CHANGELOG/#010-alpha30-2021-05-06","text":"","title":"[0.1.0-alpha.30] - 2021-05-06"},{"location":"CHANGELOG/#changed_5","text":"all-projects applies LifecycleBasePlugin to generate the clean task","title":"Changed"},{"location":"CHANGELOG/#removed_3","text":"all-projects clean task","title":"Removed"},{"location":"CHANGELOG/#010-alpha29-2021-05-06","text":"","title":"[0.1.0-alpha.29] - 2021-05-06"},{"location":"CHANGELOG/#fixed_12","text":"all-project clean task","title":"Fixed"},{"location":"CHANGELOG/#010-alpha28-2021-05-05","text":"","title":"[0.1.0-alpha.28] - 2021-05-05"},{"location":"CHANGELOG/#added_11","text":"Add to Test type tasks a few improvements by default","title":"Added"},{"location":"CHANGELOG/#fixed_13","text":"docs looking for an incorrect path in all **.md projects files Fix clean task being registered even with it already exists","title":"Fixed"},{"location":"CHANGELOG/#010-alpha27-2021-05-05","text":"","title":"[0.1.0-alpha.27] - 2021-05-05"},{"location":"CHANGELOG/#fixed_14","text":"docs plugin replace wrong asset path in README.md file docs looking for an incorrect index.md file path","title":"Fixed"},{"location":"CHANGELOG/#010-alpha26-2021-05-05","text":"","title":"[0.1.0-alpha.26] - 2021-05-05"},{"location":"CHANGELOG/#changed_6","text":"mkdocs template, favicon and logo properties, in docs","title":"Changed"},{"location":"CHANGELOG/#010-alpha25-2021-05-05","text":"","title":"[0.1.0-alpha.25] - 2021-05-05"},{"location":"CHANGELOG/#added_12","text":"all-projects Default config like set up group for all projects Delete root build directory when clean task is called","title":"Added"},{"location":"CHANGELOG/#changed_7","text":"Rename libGroup to allProjects.group Rename libName to allProjects.name","title":"Changed"},{"location":"CHANGELOG/#010-alpha24-2021-05-04","text":"","title":"[0.1.0-alpha.24] - 2021-05-04"},{"location":"CHANGELOG/#changed_8","text":"readme-badges-generator renamed to readme-badges mainSubProject property renamed to readmeBadges.mainProject shouldGenerateVersionBadgePerProject renamed to readmeBadges.allProjects","title":"Changed"},{"location":"CHANGELOG/#fixed_15","text":"docs forces using markdown files in all modules even if they shouldn\u2019t have docs","title":"Fixed"},{"location":"CHANGELOG/#010-alpha23-2021-05-03","text":"","title":"[0.1.0-alpha.23] - 2021-05-03"},{"location":"CHANGELOG/#fixed_16","text":"Fix applying incorrect id in code-formatter","title":"Fixed"},{"location":"CHANGELOG/#010-alpha22-2021-05-03","text":"No changes","title":"[0.1.0-alpha.22] - 2021-05-03"},{"location":"CHANGELOG/#010-alpha21-2021-05-02","text":"","title":"[0.1.0-alpha.21] - 2021-05-02"},{"location":"CHANGELOG/#added_13","text":"docs plugin autogenerate .docs and children dirs if they don\u2019t exist docs can generate a complete website via mkdocs docs autogenerate nav bar by adding Changelog, API docs and Projects Autogenerate detekt IDEA plugin config in .idea directory Autogenerate ktfmt IDEA plugin config in .idea directory","title":"Added"},{"location":"CHANGELOG/#changed_9","text":"code-formatter is applied to all Kotlin projects by adding it in root build.gradle.kts readme-badges-generator rename generateReadmeBadges task to buildReadmeBadges Changelog registers mergeChangelog task instead of merging automatically with patchChangelog Dokka is automatically applied to all projects that are applying Kotlin Gradle plugin","title":"Changed"},{"location":"CHANGELOG/#removed_4","text":"jcenter()","title":"Removed"},{"location":"CHANGELOG/#fixed_17","text":"module docs generated hasn\u2019t MODULE.md info All publish-* plugins have using Dokka incorrectly","title":"Fixed"},{"location":"CHANGELOG/#010-alpha20-2021-04-27","text":"","title":"[0.1.0-alpha.20] - 2021-04-27"},{"location":"CHANGELOG/#added_14","text":"changelog can merge non-final versions into one final version readme-badges-generator prints Kotlin version","title":"Added"},{"location":"CHANGELOG/#010-alpha19-2021-04-27","text":"No changes","title":"[0.1.0-alpha.19] - 2021-04-27"},{"location":"CHANGELOG/#010-alpha18-2021-04-26","text":"","title":"[0.1.0-alpha.18] - 2021-04-26"},{"location":"CHANGELOG/#added_15","text":"Add all-plugins module which exposes all plugins","title":"Added"},{"location":"CHANGELOG/#removed_5","text":"ktfmt uses the default Spotless ktfmt version instead of indicating the last one Detekt version is not needed","title":"Removed"},{"location":"CHANGELOG/#fixed_18","text":"Kotlin version is found by checking all the projects instead of from Version Catalog","title":"Fixed"},{"location":"CHANGELOG/#010-alpha17-2021-04-26","text":"","title":"[0.1.0-alpha.17] - 2021-04-26"},{"location":"CHANGELOG/#updated","text":"Gradle Wrapper to 7.0","title":"Updated"},{"location":"CHANGELOG/#010-alpha16-2021-04-24","text":"","title":"[0.1.0-alpha.16] - 2021-04-24"},{"location":"CHANGELOG/#fixed_19","text":"publish-android-library doesn\u2019t sign the release publication","title":"Fixed"},{"location":"CHANGELOG/#010-alpha15-2021-04-22","text":"","title":"[0.1.0-alpha.15] - 2021-04-22"},{"location":"CHANGELOG/#fixed_20","text":"publish-android-library doesn\u2019t found any component detekt warnings","title":"Fixed"},{"location":"CHANGELOG/#010-alpha14-2021-03-22","text":"","title":"[0.1.0-alpha.14] - 2021-03-22"},{"location":"CHANGELOG/#fixed_21","text":"changelog was throwing an exception","title":"Fixed"},{"location":"CHANGELOG/#010-alpha13-2021-03-21","text":"","title":"[0.1.0-alpha.13] - 2021-03-21"},{"location":"CHANGELOG/#fixed_22","text":"changelog was throwing an exception when it was being used by first time","title":"Fixed"},{"location":"CHANGELOG/#010-alpha12-2021-03-21","text":"","title":"[0.1.0-alpha.12] - 2021-03-21"},{"location":"CHANGELOG/#fixed_23","text":"changelog output format was incorrect","title":"Fixed"},{"location":"CHANGELOG/#010-alpha11-2021-03-21","text":"","title":"[0.1.0-alpha.11] - 2021-03-21"},{"location":"CHANGELOG/#fixed_24","text":"publish-version-catalog wasn\u2019t applying version-catalog plugin","title":"Fixed"},{"location":"CHANGELOG/#010-alpha10-2021-03-21","text":"","title":"[0.1.0-alpha.10] - 2021-03-21"},{"location":"CHANGELOG/#changed_10","text":"readme-badges-generator registers generateReadmeBadges instead of generate badges when syncing","title":"Changed"},{"location":"CHANGELOG/#fixed_25","text":"changelog output format was incorrect","title":"Fixed"},{"location":"CHANGELOG/#010-alpha9-2021-03-21","text":"","title":"[0.1.0-alpha.9] - 2021-03-21"},{"location":"CHANGELOG/#fixed_26","text":"publish-* plugins were not working","title":"Fixed"},{"location":"CHANGELOG/#010-alpha8-2021-03-21","text":"","title":"[0.1.0-alpha.8] - 2021-03-21"},{"location":"CHANGELOG/#changed_11","text":"Separate publish plugin into: publish-android-library publish-kotlin-jvm publish-kotlin-multiplatform publish-version-catalog Show git diff when checkIsSignificant is invoked in all publish plugins","title":"Changed"},{"location":"CHANGELOG/#010-alpha7-2021-03-20","text":"No changes","title":"[0.1.0-alpha.7] - 2021-03-20"},{"location":"CHANGELOG/#010-alpha6-2021-03-20","text":"","title":"[0.1.0-alpha.6] - 2021-03-20"},{"location":"CHANGELOG/#added_16","text":"plugins publish-gradle-plugin","title":"Added"},{"location":"CHANGELOG/#010-alpha5-2021-03-20","text":"","title":"[0.1.0-alpha.5] - 2021-03-20"},{"location":"CHANGELOG/#added_17","text":"support to com.android.library and version-catalog plugins in publish","title":"Added"},{"location":"CHANGELOG/#changed_12","text":"Move checkIsSignificant Gradle task from versioning to publish","title":"Changed"},{"location":"CHANGELOG/#fixed_27","text":"changelog plugin was adding to the end of the file two new lines","title":"Fixed"},{"location":"CHANGELOG/#010-alpha4-2021-03-20","text":"No changes","title":"[0.1.0-alpha.4] - 2021-03-20"},{"location":"CHANGELOG/#010-alpha3-2021-03-19","text":"","title":"[0.1.0-alpha.3] - 2021-03-19"},{"location":"CHANGELOG/#added_18","text":"expose getDefaultLanguageSettings","title":"Added"},{"location":"CHANGELOG/#010-alpha2-2021-03-18","text":"No changes","title":"[0.1.0-alpha.2] - 2021-03-18"},{"location":"CHANGELOG/#010-alpha1-2021-03-18","text":"","title":"[0.1.0-alpha.1] - 2021-03-18"},{"location":"CHANGELOG/#added_19","text":"plugins changelog code-analysis code-formatter dependency-updates docs kotlin-multiplatform nexus publish readme-badges-generator versioning","title":"Added"},{"location":"projects/all-projects/","text":"Module all-projects \u00b6 A custom plugin which a default config for all projects Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:all-projects: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-all-projects` } Usage \u00b6 Define the next properties in gradle.properties allProjects.group = com.javiersc allProjects.name = gradle-plugins The group for all projects will be group = \"com.javiersc.gradle-plugins","title":"all-projects"},{"location":"projects/all-projects/#module-all-projects","text":"A custom plugin which a default config for all projects","title":"Module all-projects"},{"location":"projects/all-projects/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:all-projects: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/all-projects/#apply","text":"In the root build.gradle.kts plugins { `javiersc-all-projects` }","title":"Apply"},{"location":"projects/all-projects/#usage","text":"Define the next properties in gradle.properties allProjects.group = com.javiersc allProjects.name = gradle-plugins The group for all projects will be group = \"com.javiersc.gradle-plugins","title":"Usage"},{"location":"projects/android-core/","text":"Module android-core \u00b6 Set of utilities for javiersc plugins and more Download from MavenCentral \u00b6 implementation ( \"com.javiersc.gradle-plugins:android-core: $ version \" )","title":"android-core"},{"location":"projects/android-core/#module-android-core","text":"Set of utilities for javiersc plugins and more","title":"Module android-core"},{"location":"projects/android-core/#download-from-mavencentral","text":"implementation ( \"com.javiersc.gradle-plugins:android-core: $ version \" )","title":"Download from MavenCentral"},{"location":"projects/android-library/","text":"Module kotlin-multiplatform \u00b6 A custom plugin for Android libraries which uses com.android.library under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:android-library: $ version \" ) } Apply \u00b6 Add it to all Android libraries modules in the project plugins { `javiersc-android-library` } Usage \u00b6 Just apply it, it has a series of default options enabled","title":"android-library"},{"location":"projects/android-library/#module-kotlin-multiplatform","text":"A custom plugin for Android libraries which uses com.android.library under the hood.","title":"Module kotlin-multiplatform"},{"location":"projects/android-library/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:android-library: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/android-library/#apply","text":"Add it to all Android libraries modules in the project plugins { `javiersc-android-library` }","title":"Apply"},{"location":"projects/android-library/#usage","text":"Just apply it, it has a series of default options enabled","title":"Usage"},{"location":"projects/build-version-catalogs-updater/","text":"Module build-version-catalogs-updater \u00b6 A plugin for updating Build Version Catalogs Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:build-version-catalogs-updater: $ version \" ) } Apply \u00b6 Add it to the root build.gradle.kts plugins { `javiersc-build-version-catalogs-updater` } Usage \u00b6 ./gradlew updateBuildVersionCatalogs","title":"build-version-catalogs-updater"},{"location":"projects/build-version-catalogs-updater/#module-build-version-catalogs-updater","text":"A plugin for updating Build Version Catalogs","title":"Module build-version-catalogs-updater"},{"location":"projects/build-version-catalogs-updater/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:build-version-catalogs-updater: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/build-version-catalogs-updater/#apply","text":"Add it to the root build.gradle.kts plugins { `javiersc-build-version-catalogs-updater` }","title":"Apply"},{"location":"projects/build-version-catalogs-updater/#usage","text":"./gradlew updateBuildVersionCatalogs","title":"Usage"},{"location":"projects/build-version-catalogs/","text":"Module build-version-catalog \u00b6 Build Version Catalogs from Gradle files which allow dependabot compatibility Apply \u00b6 gradle.properties buildVersionCatalogs = 1.0.0 settings.gradle.kts pluginManagement { repositories { mavenCentral () } plugins { val buildVersionCatalogs : String by settings id ( \"com.javiersc.gradle.plugins.build.version.catalogs\" ) version buildVersionCatalogs } } plugins { id ( \"com.javiersc.gradle.plugins.build.version.catalogs\" ) } Usage \u00b6 Create a project which includes in the build.gradle.kts : @file : Suppress ( \"PropertyName\" , \"VariableNaming\" ) // Catalog name: libs // [versions] val coroutines = \"1.5.0\" // [libraries] val coroutines_core = \"org.jetbrains.kotlinx:kotlinx-coroutines-core: $ coroutines \" val coroutines_android = \"org.jetbrains.kotlinx:kotlinx-coroutines-android: $ coroutines \" // [bundles] val allCoroutines = coroutines_core + coroutines_android This will auto-generate and auto-add a Version Catalog called libs in build/catalogs/libs.toml A version inside any library can be omitted, setting only the module part bundles can be omitted Add manually the catalogs to another project (i.e. buildSrc ) \u00b6 settings.gradle.kts dependencyResolutionManagement { repositories { mavenCentral () } versionCatalogs { create ( \"libs\" ) { from ( files ( \"../build/catalogs/libs.toml\" )) } } }","title":"build-version-catalogs"},{"location":"projects/build-version-catalogs/#module-build-version-catalog","text":"Build Version Catalogs from Gradle files which allow dependabot compatibility","title":"Module build-version-catalog"},{"location":"projects/build-version-catalogs/#apply","text":"gradle.properties buildVersionCatalogs = 1.0.0 settings.gradle.kts pluginManagement { repositories { mavenCentral () } plugins { val buildVersionCatalogs : String by settings id ( \"com.javiersc.gradle.plugins.build.version.catalogs\" ) version buildVersionCatalogs } } plugins { id ( \"com.javiersc.gradle.plugins.build.version.catalogs\" ) }","title":"Apply"},{"location":"projects/build-version-catalogs/#usage","text":"Create a project which includes in the build.gradle.kts : @file : Suppress ( \"PropertyName\" , \"VariableNaming\" ) // Catalog name: libs // [versions] val coroutines = \"1.5.0\" // [libraries] val coroutines_core = \"org.jetbrains.kotlinx:kotlinx-coroutines-core: $ coroutines \" val coroutines_android = \"org.jetbrains.kotlinx:kotlinx-coroutines-android: $ coroutines \" // [bundles] val allCoroutines = coroutines_core + coroutines_android This will auto-generate and auto-add a Version Catalog called libs in build/catalogs/libs.toml A version inside any library can be omitted, setting only the module part bundles can be omitted","title":"Usage"},{"location":"projects/build-version-catalogs/#add-manually-the-catalogs-to-another-project-ie-buildsrc","text":"settings.gradle.kts dependencyResolutionManagement { repositories { mavenCentral () } versionCatalogs { create ( \"libs\" ) { from ( files ( \"../build/catalogs/libs.toml\" )) } } }","title":"Add manually the catalogs to another project (i.e. buildSrc)"},{"location":"projects/changelog/","text":"Module changelog \u00b6 A custom plugin for changelog plugin which uses JetBrains Changelog plugin under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:changelog: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-changelog` } Usage \u00b6 Completely configured, check the original plugin for more info. ./gradlew mergeChangelog This task has only effect when the project version is final, and it will merge the previous beta/alpha/rc versions into one when it is invoked. The date of the merged version will be the date when the task is executed. The usual workflow when it is desired to merge all non-final versions into one when the final version is being released is to patch the changelog and then merge it: ./gradlew patchChangelog mergeChangelog Samples \u00b6 Supposing this changelog and running the task # Changelog ## [Unreleased] ### Added ### Changed ### Deprecated ### Removed ### Fixed ### Updated ## [0.1.0-alpha.2] - 2021-04-27 ### Added - `changelog` can merge non-final versions into one final version - `readme-badges-generator` prints Kotlin version ## [0.1.0-alpha.1] - 2021-04-26 ### Fixed - Kotlin version is found by checking all the projects instead of from Version Catalog The changelog will be merged to: # Changelog ## [Unreleased] ### Added ### Changed ### Deprecated ### Removed ### Fixed ### Updated ## [0.1.0] - 2021-05-01 ### Added - `changelog` can merge non-final versions into one final version - `readme-badges-generator` prints Kotlin version ### Fixed - Kotlin version is found by checking all the projects instead of from Version Catalog","title":"changelog"},{"location":"projects/changelog/#module-changelog","text":"A custom plugin for changelog plugin which uses JetBrains Changelog plugin under the hood.","title":"Module changelog"},{"location":"projects/changelog/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:changelog: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/changelog/#apply","text":"In the root build.gradle.kts plugins { `javiersc-changelog` }","title":"Apply"},{"location":"projects/changelog/#usage","text":"Completely configured, check the original plugin for more info. ./gradlew mergeChangelog This task has only effect when the project version is final, and it will merge the previous beta/alpha/rc versions into one when it is invoked. The date of the merged version will be the date when the task is executed. The usual workflow when it is desired to merge all non-final versions into one when the final version is being released is to patch the changelog and then merge it: ./gradlew patchChangelog mergeChangelog","title":"Usage"},{"location":"projects/changelog/#samples","text":"Supposing this changelog and running the task # Changelog ## [Unreleased] ### Added ### Changed ### Deprecated ### Removed ### Fixed ### Updated ## [0.1.0-alpha.2] - 2021-04-27 ### Added - `changelog` can merge non-final versions into one final version - `readme-badges-generator` prints Kotlin version ## [0.1.0-alpha.1] - 2021-04-26 ### Fixed - Kotlin version is found by checking all the projects instead of from Version Catalog The changelog will be merged to: # Changelog ## [Unreleased] ### Added ### Changed ### Deprecated ### Removed ### Fixed ### Updated ## [0.1.0] - 2021-05-01 ### Added - `changelog` can merge non-final versions into one final version - `readme-badges-generator` prints Kotlin version ### Fixed - Kotlin version is found by checking all the projects instead of from Version Catalog","title":"Samples"},{"location":"projects/code-analysis/","text":"Module code-analysis \u00b6 A custom plugin for code analysis which uses Detekt under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:code-analysis: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-code-analysis` } Usage \u00b6 Completely configured, and it adds automatically the detekt.xml config used by the IDEA plugin, so the IDEA plugin is enabled by default.","title":"code-analysis"},{"location":"projects/code-analysis/#module-code-analysis","text":"A custom plugin for code analysis which uses Detekt under the hood.","title":"Module code-analysis"},{"location":"projects/code-analysis/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:code-analysis: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/code-analysis/#apply","text":"In the root build.gradle.kts plugins { `javiersc-code-analysis` }","title":"Apply"},{"location":"projects/code-analysis/#usage","text":"Completely configured, and it adds automatically the detekt.xml config used by the IDEA plugin, so the IDEA plugin is enabled by default.","title":"Usage"},{"location":"projects/code-formatter/","text":"Module code-formatter \u00b6 A custom plugin for code formatting which uses ktfmt and Spotless under the hood Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:code-formatter: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-code-formatter` } Usage \u00b6 Completely configured, and it adds automatically the ktfmt.xml config used by the IDEA plugin, so the IDEA plugin is enabled by default.","title":"code-formatter"},{"location":"projects/code-formatter/#module-code-formatter","text":"A custom plugin for code formatting which uses ktfmt and Spotless under the hood","title":"Module code-formatter"},{"location":"projects/code-formatter/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:code-formatter: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/code-formatter/#apply","text":"In the root build.gradle.kts plugins { `javiersc-code-formatter` }","title":"Apply"},{"location":"projects/code-formatter/#usage","text":"Completely configured, and it adds automatically the ktfmt.xml config used by the IDEA plugin, so the IDEA plugin is enabled by default.","title":"Usage"},{"location":"projects/core/","text":"Module core \u00b6 Set of utilities for javiersc plugins and more Download from MavenCentral \u00b6 implementation ( \"com.javiersc.gradle-plugins:core: $ version \" )","title":"core"},{"location":"projects/core/#module-core","text":"Set of utilities for javiersc plugins and more","title":"Module core"},{"location":"projects/core/#download-from-mavencentral","text":"implementation ( \"com.javiersc.gradle-plugins:core: $ version \" )","title":"Download from MavenCentral"},{"location":"projects/dependency-updates/","text":"Module dependency-updates \u00b6 A custom plugin for to find the latest versions for all dependencies which uses ben-manes under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:dependency-updates: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-dependency-updates` } Usage \u00b6 Just run the task ./gradlew dependencyUpdates Add to gradle.properties the property dependencyDiscoveryLimit to define the limit for the dependencies. Options: SNAPSHOT dev eap alpha beta M (or milestone ) rc stable Samples \u00b6 dependencyDiscoveryLimit = stable","title":"dependency-updates"},{"location":"projects/dependency-updates/#module-dependency-updates","text":"A custom plugin for to find the latest versions for all dependencies which uses ben-manes under the hood.","title":"Module dependency-updates"},{"location":"projects/dependency-updates/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:dependency-updates: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/dependency-updates/#apply","text":"In the root build.gradle.kts plugins { `javiersc-dependency-updates` }","title":"Apply"},{"location":"projects/dependency-updates/#usage","text":"Just run the task ./gradlew dependencyUpdates Add to gradle.properties the property dependencyDiscoveryLimit to define the limit for the dependencies. Options: SNAPSHOT dev eap alpha beta M (or milestone ) rc stable","title":"Usage"},{"location":"projects/dependency-updates/#samples","text":"dependencyDiscoveryLimit = stable","title":"Samples"},{"location":"projects/docs/","text":"Module docs \u00b6 A custom plugin for generating a website, including API docs or adding the changelog. It uses Dokka and mkdocs under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:docs: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-docs` } Usage \u00b6 The next task will generate Dokka docs and the website: ./gradlew buildDocs If .docs directory doesn\u2019t exist in the project, it is created with a few files: .docs/mkdocs.yml : mkdocs config. .docs/docs/css/all.css : extra css config. assets/empty.file : Remove this file, add logo/favicon and so on. The only config necessary is adding custom navigations to mkdocs.yml and whatever necessary page. Additionally, Kotlin API docs from Dokka and Changelog are added to the website automatically. Changelog is added if CHANGELOG.md file exists in the root dir. API docs directories are based on the version: /api/ : shortcut to the latest version. /api/versions/1.0.0/ , /api/versions/1.0.1/ and so on. Avoid cleaning the branch so all version are saved. /api/snapshot/ : If version ends with -SNAPSHOT Ignore projects \u00b6 Avoid certain modules can be published dokkaHtmlMultiModule { removeChildTasks ( listOf ( project ( \":subprojectA\" ), project ( \":subprojectB\" ) ) ) }","title":"docs"},{"location":"projects/docs/#module-docs","text":"A custom plugin for generating a website, including API docs or adding the changelog. It uses Dokka and mkdocs under the hood.","title":"Module docs"},{"location":"projects/docs/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:docs: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/docs/#apply","text":"In the root build.gradle.kts plugins { `javiersc-docs` }","title":"Apply"},{"location":"projects/docs/#usage","text":"The next task will generate Dokka docs and the website: ./gradlew buildDocs If .docs directory doesn\u2019t exist in the project, it is created with a few files: .docs/mkdocs.yml : mkdocs config. .docs/docs/css/all.css : extra css config. assets/empty.file : Remove this file, add logo/favicon and so on. The only config necessary is adding custom navigations to mkdocs.yml and whatever necessary page. Additionally, Kotlin API docs from Dokka and Changelog are added to the website automatically. Changelog is added if CHANGELOG.md file exists in the root dir. API docs directories are based on the version: /api/ : shortcut to the latest version. /api/versions/1.0.0/ , /api/versions/1.0.1/ and so on. Avoid cleaning the branch so all version are saved. /api/snapshot/ : If version ends with -SNAPSHOT","title":"Usage"},{"location":"projects/docs/#ignore-projects","text":"Avoid certain modules can be published dokkaHtmlMultiModule { removeChildTasks ( listOf ( project ( \":subprojectA\" ), project ( \":subprojectB\" ) ) ) }","title":"Ignore projects"},{"location":"projects/gradle-wrapper-updater/","text":"Module gradle-wrapper-updater \u00b6 A plugin for updating the Gradle Wrapper Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:gradle-wrapper-updater: $ version \" ) } Apply \u00b6 Add it to the root build.gradle.kts plugins { `javiersc-gradle-wrapper-updater` } Usage \u00b6 ./gradlew updateGradleWrapper Set the stage to get the latest Release Candidate or Nightly \u00b6 shell ./gradlew updateGradleWrapper -P\"gradlew.stage\"=\"rc\" Notes \u00b6 If the input is not set, or it is current , the last stable version will be used. If the input is rc , the last release candidate version will be used, can be possible there is no release candidate version. If the input is nightly , the last nightly version will be used.","title":"gradle-wrapper-updater"},{"location":"projects/gradle-wrapper-updater/#module-gradle-wrapper-updater","text":"A plugin for updating the Gradle Wrapper","title":"Module gradle-wrapper-updater"},{"location":"projects/gradle-wrapper-updater/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:gradle-wrapper-updater: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/gradle-wrapper-updater/#apply","text":"Add it to the root build.gradle.kts plugins { `javiersc-gradle-wrapper-updater` }","title":"Apply"},{"location":"projects/gradle-wrapper-updater/#usage","text":"./gradlew updateGradleWrapper","title":"Usage"},{"location":"projects/gradle-wrapper-updater/#set-the-stage-to-get-the-latest-release-candidate-or-nightly","text":"shell ./gradlew updateGradleWrapper -P\"gradlew.stage\"=\"rc\"","title":"Set the stage to get the latest Release Candidate or Nightly"},{"location":"projects/gradle-wrapper-updater/#notes","text":"If the input is not set, or it is current , the last stable version will be used. If the input is rc , the last release candidate version will be used, can be possible there is no release candidate version. If the input is nightly , the last nightly version will be used.","title":"Notes"},{"location":"projects/kotlin-jvm/","text":"Module kotlin-jvm \u00b6 A custom plugin for Kotlin JVM which uses kotlin(\"jvm\") under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-jvm: $ version \" ) } Apply \u00b6 Add it to all Kotlin JVM modules in the project plugins { `javiersc-kotlin-jvm` } Usage \u00b6 Just apply it, it has a series of default options enabled, for example, an improved project structure","title":"kotlin-jvm"},{"location":"projects/kotlin-jvm/#module-kotlin-jvm","text":"A custom plugin for Kotlin JVM which uses kotlin(\"jvm\") under the hood.","title":"Module kotlin-jvm"},{"location":"projects/kotlin-jvm/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-jvm: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/kotlin-jvm/#apply","text":"Add it to all Kotlin JVM modules in the project plugins { `javiersc-kotlin-jvm` }","title":"Apply"},{"location":"projects/kotlin-jvm/#usage","text":"Just apply it, it has a series of default options enabled, for example, an improved project structure","title":"Usage"},{"location":"projects/kotlin-multiplatform-core/","text":"Module kotlin-multiplatform-core \u00b6 Set of utilities for javiersc plugins and more Download from MavenCentral \u00b6 implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform-core: $ version \" )","title":"kotlin-multiplatform-core"},{"location":"projects/kotlin-multiplatform-core/#module-kotlin-multiplatform-core","text":"Set of utilities for javiersc plugins and more","title":"Module kotlin-multiplatform-core"},{"location":"projects/kotlin-multiplatform-core/#download-from-mavencentral","text":"implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform-core: $ version \" )","title":"Download from MavenCentral"},{"location":"projects/kotlin-multiplatform-no-android/","text":"Module kotlin-multiplatform-no-android \u00b6 A custom plugin for Kotlin Multiplatform which uses kotlin(\"multitiplatform\") under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform-no-android: $ version \" ) } Apply \u00b6 Add it to all Kotlin Multiplatform modules in the project plugins { `javiersc-kotlin-multiplatform-no-android` } Usage \u00b6 Just apply it, it has a series of default options enabled, for example, remove warning for some experimental features.","title":"kotlin-multiplatform-no-android"},{"location":"projects/kotlin-multiplatform-no-android/#module-kotlin-multiplatform-no-android","text":"A custom plugin for Kotlin Multiplatform which uses kotlin(\"multitiplatform\") under the hood.","title":"Module kotlin-multiplatform-no-android"},{"location":"projects/kotlin-multiplatform-no-android/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform-no-android: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/kotlin-multiplatform-no-android/#apply","text":"Add it to all Kotlin Multiplatform modules in the project plugins { `javiersc-kotlin-multiplatform-no-android` }","title":"Apply"},{"location":"projects/kotlin-multiplatform-no-android/#usage","text":"Just apply it, it has a series of default options enabled, for example, remove warning for some experimental features.","title":"Usage"},{"location":"projects/kotlin-multiplatform/","text":"Module kotlin-multiplatform \u00b6 A custom plugin for Kotlin Multiplatform which uses kotlin(\"multitiplatform\") under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform: $ version \" ) } Apply \u00b6 Add it to all Kotlin Multiplatform modules in the project plugins { `javiersc-kotlin-multiplatform` } Usage \u00b6 Just apply it, it has a series of default options enabled, for example, remove warning for some experimental features.","title":"kotlin-multiplatform"},{"location":"projects/kotlin-multiplatform/#module-kotlin-multiplatform","text":"A custom plugin for Kotlin Multiplatform which uses kotlin(\"multitiplatform\") under the hood.","title":"Module kotlin-multiplatform"},{"location":"projects/kotlin-multiplatform/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:kotlin-multiplatform: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/kotlin-multiplatform/#apply","text":"Add it to all Kotlin Multiplatform modules in the project plugins { `javiersc-kotlin-multiplatform` }","title":"Apply"},{"location":"projects/kotlin-multiplatform/#usage","text":"Just apply it, it has a series of default options enabled, for example, remove warning for some experimental features.","title":"Usage"},{"location":"projects/massive-catalogs-updater/","text":"Module massive-catalogs-updater \u00b6 A plugin for updating Massive Catalogs Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:massive-catalogs-updater: $ version \" ) } Apply \u00b6 Add it to the root build.gradle.kts plugins { `javiersc-massive-catalogs-updater` } Usage \u00b6 ./gradlew updateMassiveCatalogs","title":"massive-catalogs-updater"},{"location":"projects/massive-catalogs-updater/#module-massive-catalogs-updater","text":"A plugin for updating Massive Catalogs","title":"Module massive-catalogs-updater"},{"location":"projects/massive-catalogs-updater/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:massive-catalogs-updater: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/massive-catalogs-updater/#apply","text":"Add it to the root build.gradle.kts plugins { `javiersc-massive-catalogs-updater` }","title":"Apply"},{"location":"projects/massive-catalogs-updater/#usage","text":"./gradlew updateMassiveCatalogs","title":"Usage"},{"location":"projects/nexus/","text":"Module nexus \u00b6 A custom plugin for publishing to MavenCentral which uses publish-plugin under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:nexus: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-nexus` } Usage \u00b6 Just apply it and add the next Gradle properties: oss.user : Copy/generate it from the Nexus profile oss.token : Copy/generate it from the Nexus profile oss.stagingProfileId : Visit staging profiles select your profile from the list and copy the code after the ; , for example, the code from this url https://oss.sonatype.org/#stagingProfiles;32gf35h34654 is 32gf35h34654 Environment variables can be used instead of Gradle properties: OSS_USER OSS_TOKEN OSS_STAGING_PROFILE_ID","title":"nexus"},{"location":"projects/nexus/#module-nexus","text":"A custom plugin for publishing to MavenCentral which uses publish-plugin under the hood.","title":"Module nexus"},{"location":"projects/nexus/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:nexus: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/nexus/#apply","text":"In the root build.gradle.kts plugins { `javiersc-nexus` }","title":"Apply"},{"location":"projects/nexus/#usage","text":"Just apply it and add the next Gradle properties: oss.user : Copy/generate it from the Nexus profile oss.token : Copy/generate it from the Nexus profile oss.stagingProfileId : Visit staging profiles select your profile from the list and copy the code after the ; , for example, the code from this url https://oss.sonatype.org/#stagingProfiles;32gf35h34654 is 32gf35h34654 Environment variables can be used instead of Gradle properties: OSS_USER OSS_TOKEN OSS_STAGING_PROFILE_ID","title":"Usage"},{"location":"projects/plugin-accessors/","text":"Module plugin-accessors \u00b6 Set of accessors for Gradle plugins Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:plugin-accessors: $ version \" ) } Usage \u00b6 Each plugin can be applied with or without version, depending on how the plugin dependency is added, for example: plugins { `android-library` } plugins { `android-library` version \"4.1.3\" } List of plugins \u00b6 android-library android-application auto-include ben-manes-versions changelog compose hilt-android detekt dokka gradle-plugin-publish kotlin-android kotlin-jvm kotlin-js kotlin-kapt kotlin-ksp kotlin-multiplatform kotlin-parcelize kotlin-serialization kotlinx-binary-compatibility-validator kotlin-binary-compatibility-validator mkdocs nexus-publish reckon spotless","title":"plugin-accessors"},{"location":"projects/plugin-accessors/#module-plugin-accessors","text":"Set of accessors for Gradle plugins","title":"Module plugin-accessors"},{"location":"projects/plugin-accessors/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:plugin-accessors: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/plugin-accessors/#usage","text":"Each plugin can be applied with or without version, depending on how the plugin dependency is added, for example: plugins { `android-library` } plugins { `android-library` version \"4.1.3\" }","title":"Usage"},{"location":"projects/plugin-accessors/#list-of-plugins","text":"android-library android-application auto-include ben-manes-versions changelog compose hilt-android detekt dokka gradle-plugin-publish kotlin-android kotlin-jvm kotlin-js kotlin-kapt kotlin-ksp kotlin-multiplatform kotlin-parcelize kotlin-serialization kotlinx-binary-compatibility-validator kotlin-binary-compatibility-validator mkdocs nexus-publish reckon spotless","title":"List of plugins"},{"location":"projects/publish-android-library/","text":"Module publish-android-library \u00b6 A custom plugin for publishing Android libraries which uses maven-publish under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-android-library: $ version \" ) } Apply \u00b6 Add it to all Android libraries modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-android-library` } Usage \u00b6 Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"publish-android-library"},{"location":"projects/publish-android-library/#module-publish-android-library","text":"A custom plugin for publishing Android libraries which uses maven-publish under the hood.","title":"Module publish-android-library"},{"location":"projects/publish-android-library/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-android-library: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/publish-android-library/#apply","text":"Add it to all Android libraries modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-android-library` }","title":"Apply"},{"location":"projects/publish-android-library/#usage","text":"Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"Usage"},{"location":"projects/publish-gradle-plugin/","text":"Module publish-gradle-plugin \u00b6 A custom plugin for publishing Gradle plugins to MavenCentral and Gradle Plugin Portal which uses maven-publish and id(\"com.gradle.plugin-publish\") under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-gradle-plugin: $ version \" ) } Apply \u00b6 Add it to all Gradle plugins modules in the project that should be published to MavenCentral or Gradle Plugin Portal plugins { `javiersc-publish-gradle-plugin` } Usage \u00b6 Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"publish-gradle-plugin"},{"location":"projects/publish-gradle-plugin/#module-publish-gradle-plugin","text":"A custom plugin for publishing Gradle plugins to MavenCentral and Gradle Plugin Portal which uses maven-publish and id(\"com.gradle.plugin-publish\") under the hood.","title":"Module publish-gradle-plugin"},{"location":"projects/publish-gradle-plugin/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-gradle-plugin: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/publish-gradle-plugin/#apply","text":"Add it to all Gradle plugins modules in the project that should be published to MavenCentral or Gradle Plugin Portal plugins { `javiersc-publish-gradle-plugin` }","title":"Apply"},{"location":"projects/publish-gradle-plugin/#usage","text":"Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"Usage"},{"location":"projects/publish-kotlin-jvm/","text":"Module publish-kotlin-jvm \u00b6 A custom plugin for publishing Kotlin JVM projects which uses maven-publish under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-kotlin-jvm: $ version \" ) } Apply \u00b6 Add it to all Kotlin JVM modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-kotlin-jvm` } Usage \u00b6 Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"publish-kotlin-jvm"},{"location":"projects/publish-kotlin-jvm/#module-publish-kotlin-jvm","text":"A custom plugin for publishing Kotlin JVM projects which uses maven-publish under the hood.","title":"Module publish-kotlin-jvm"},{"location":"projects/publish-kotlin-jvm/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-kotlin-jvm: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/publish-kotlin-jvm/#apply","text":"Add it to all Kotlin JVM modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-kotlin-jvm` }","title":"Apply"},{"location":"projects/publish-kotlin-jvm/#usage","text":"Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"Usage"},{"location":"projects/publish-kotlin-multiplatform/","text":"Module publish-kotlin-multiplatform \u00b6 A custom plugin for publishing Kotlin Multiplatform projects which uses maven-publish under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-kotlin-multiplatform: $ version \" ) } Apply \u00b6 Add it to all Kotlin Multiplatform modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-kotlin-multiplatform` } Usage \u00b6 Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"publish-kotlin-multiplatform"},{"location":"projects/publish-kotlin-multiplatform/#module-publish-kotlin-multiplatform","text":"A custom plugin for publishing Kotlin Multiplatform projects which uses maven-publish under the hood.","title":"Module publish-kotlin-multiplatform"},{"location":"projects/publish-kotlin-multiplatform/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-kotlin-multiplatform: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/publish-kotlin-multiplatform/#apply","text":"Add it to all Kotlin Multiplatform modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-kotlin-multiplatform` }","title":"Apply"},{"location":"projects/publish-kotlin-multiplatform/#usage","text":"Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"Usage"},{"location":"projects/publish-version-catalog/","text":"Module publish-version-catalog \u00b6 A custom plugin for publishing Version Catalog projects which uses maven-publish under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-version-catalog: $ version \" ) } Apply \u00b6 Add it to all Version Catalog modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-version-catalog` } Usage \u00b6 Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"publish-version-catalog"},{"location":"projects/publish-version-catalog/#module-publish-version-catalog","text":"A custom plugin for publishing Version Catalog projects which uses maven-publish under the hood.","title":"Module publish-version-catalog"},{"location":"projects/publish-version-catalog/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:publish-version-catalog: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/publish-version-catalog/#apply","text":"Add it to all Version Catalog modules in the project that should be published to MavenCentral. plugins { `javiersc-publish-version-catalog` }","title":"Apply"},{"location":"projects/publish-version-catalog/#usage","text":"Just apply it and add the next Gradle properties (replace the values of each property with the correct ones): #################################################################################################### ### POM ### #################################################################################################### pom.name = Gradle Plugins pom.description = Gradle Plugins utilities pom.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.license.name = The Apache License, Version 2.0 pom.license.url = \"https://www.apache.org/licenses/LICENSE-2.0.txt\" pom.developer.id = JavierSegoviaCordoba pom.developer.name = Javier Segovia Cordoba pom.developer.email = javier@segoviacordoba.com pom.smc.url = https://github.com/JavierSegoviaCordoba/gradle-plugins pom.smc.connection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git pom.smc.developerConnection = scm:git:git@github.com:JavierSegoviaCordoba/gradle-plugins.git","title":"Usage"},{"location":"projects/publishing-core/","text":"Module publishing-core \u00b6 Set of utilities for javiersc-publish-* plugins Download from MavenCentral \u00b6 dependencies { implementation ( \"com.javiersc.gradle-plugins:publishing-core: $ version \" ) }","title":"publishing-core"},{"location":"projects/publishing-core/#module-publishing-core","text":"Set of utilities for javiersc-publish-* plugins","title":"Module publishing-core"},{"location":"projects/publishing-core/#download-from-mavencentral","text":"dependencies { implementation ( \"com.javiersc.gradle-plugins:publishing-core: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/readme-badges/","text":"Module readme-badges \u00b6 Automatically add badges to the root README file. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:readme-badges: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-readme-badges-generator` } Usage \u00b6 Run the next task so all badges are generated and/or the Kotlin version is updated to the latest version and reflected in its respective badge. ./gradlew buildReadmeBadges Add to gradle.properties allProjects.group = com.javiersc allProjects.name = gradle-plugins readmeBadges.mainProject = versioning readmeBadges.allProjects = false # false by default, true generates badges for all projects","title":"readme-badges"},{"location":"projects/readme-badges/#module-readme-badges","text":"Automatically add badges to the root README file.","title":"Module readme-badges"},{"location":"projects/readme-badges/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:readme-badges: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/readme-badges/#apply","text":"In the root build.gradle.kts plugins { `javiersc-readme-badges-generator` }","title":"Apply"},{"location":"projects/readme-badges/#usage","text":"Run the next task so all badges are generated and/or the Kotlin version is updated to the latest version and reflected in its respective badge. ./gradlew buildReadmeBadges Add to gradle.properties allProjects.group = com.javiersc allProjects.name = gradle-plugins readmeBadges.mainProject = versioning readmeBadges.allProjects = false # false by default, true generates badges for all projects","title":"Usage"},{"location":"projects/versioning/","text":"Module versioning \u00b6 A custom plugin for git tags versioning which used reckon plugin under the hood. Download from MavenCentral \u00b6 // buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:versioning: $ version \" ) } Apply \u00b6 In the root build.gradle.kts plugins { `javiersc-versioning` } Usage \u00b6 Check Reckon readme or samples to see how it works Check samples about how to manage the project version with GitHub Actions in .github/workflows","title":"versioning"},{"location":"projects/versioning/#module-versioning","text":"A custom plugin for git tags versioning which used reckon plugin under the hood.","title":"Module versioning"},{"location":"projects/versioning/#download-from-mavencentral","text":"// buildSrc/build.gradle.kts dependencies { implementation ( \"com.javiersc.gradle-plugins:versioning: $ version \" ) }","title":"Download from MavenCentral"},{"location":"projects/versioning/#apply","text":"In the root build.gradle.kts plugins { `javiersc-versioning` }","title":"Apply"},{"location":"projects/versioning/#usage","text":"Check Reckon readme or samples to see how it works Check samples about how to manage the project version with GitHub Actions in .github/workflows","title":"Usage"}]}